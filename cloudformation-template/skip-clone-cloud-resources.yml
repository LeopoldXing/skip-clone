AWSTemplateFormatVersion: '2010-09-09'
Description: >
  CloudFormation template for establishing the cloud resources of skip-clone application.
  It creates a VPC with three public and three private subnets across three AZs for high availability,
  a S3 bucket with CloudFront (using OAC) for frontend hosting,
  an Elastic Beanstalk application and environment for deploying backend application,
  and sets up Route53 with a custom domain and ACM SSL certificate for the ALB.

Parameters:
  RandomSuffix:
    Description: "A random 4-digit number for the S3 bucket name suffix and domain uniqueness (e.g., 1234)."
    Type: String
    AllowedPattern: "^[0-9]{4}$"
    ConstraintDescription: "Must be a 4-digit number, e.g., 1234."

Resources:
  # ------------------------------
  # 网络相关资源
  # ------------------------------

  # Create VPC
  SkipCloneVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: skip-clone-vpc

  # Create Public Subnets in three AZs
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SkipCloneVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: skip-clone-public-subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SkipCloneVPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: skip-clone-public-subnet-2

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SkipCloneVPC
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 2, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: skip-clone-public-subnet-3

  # Create Private Subnets in three AZs
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SkipCloneVPC
      CidrBlock: 10.0.11.0/24
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: skip-clone-private-subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SkipCloneVPC
      CidrBlock: 10.0.12.0/24
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: skip-clone-private-subnet-2

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SkipCloneVPC
      CidrBlock: 10.0.13.0/24
      AvailabilityZone: !Select [ 2, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: skip-clone-private-subnet-3

  # Create Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: skip-clone-igw

  # Attach Internet Gateway to VPC
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref SkipCloneVPC
      InternetGatewayId: !Ref InternetGateway

  # Create Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SkipCloneVPC
      Tags:
        - Key: Name
          Value: skip-clone-public-rt

  # Create Route for Public Route Table
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate each Public Subnet with Public Route Table
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  # ------------------------------
  # 前端托管相关资源
  # ------------------------------

  # Create S3 Bucket for frontend hosting
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join [ "", [ "skip-clone-frontend-hosting-", !Ref RandomSuffix ] ]
      WebsiteConfiguration:
        IndexDocument: index.html
    DeletionPolicy: Retain

  # Create S3 Bucket Policy to allow CloudFront access via OAC
  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Version: "2008-10-17"
        Id: PolicyForCloudFrontPrivateContent
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub "arn:aws:s3:::${FrontendBucket}/*"
            Condition:
              StringEquals:
                "AWS:SourceArn": !Sub
                  - "arn:aws:cloudfront::${AWS::AccountId}:distribution/${DistributionId}"
                  - { DistributionId: !GetAtt CloudFrontDistribution.Id }

  # Create CloudFront Origin Access Control (OAC)
  CloudFrontOAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: OAC-SkipClone-Frontend
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
        Description: "Origin Access Control for skip-clone frontend S3 bucket"

  # Create CloudFront Distribution for frontend
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt FrontendBucket.RegionalDomainName
            OriginAccessControlId: !Ref CloudFrontOAC
            S3OriginConfig: { }  # Use default settings
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          MinTTL: 0
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        PriceClass: PriceClass_100

  # ------------------------------
  # 新增：Route53 域名与 ACM 证书相关资源
  # ------------------------------

  # 创建 Hosted Zone，域名为 skip-clone.leopoldhsingresumeproject[randomSuffix].cc
  SkipCloneHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Join [ "", [ "skip-clone.leopoldhsingresumeproject", !Ref RandomSuffix, ".cc" ] ]

  # 创建 ACM 证书，使用 DNS 验证，域名为 skip-clone.leopoldhsingresumeproject[randomSuffix].cc
  SkipCloneCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Join [ "", [ "skip-clone.leopoldhsingresumeproject", !Ref RandomSuffix, ".cc" ] ]
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Join [ "", [ "skip-clone.leopoldhsingresumeproject", !Ref RandomSuffix, ".cc" ] ]
          HostedZoneId: !Ref SkipCloneHostedZone

  # 创建 CNAME 记录，将域名指向 Elastic Beanstalk 创建的 ALB
  SkipCloneCNAMERecord:
    Type: AWS::Route53::RecordSet
    DependsOn: BackendEnvironment
    Properties:
      HostedZoneId: !Ref SkipCloneHostedZone
      Name: !Join [ "", [ "skip-clone.leopoldhsingresumeproject", !Ref RandomSuffix, ".cc" ] ]
      Type: CNAME
      TTL: '300'
      ResourceRecords:
        - !GetAtt BackendEnvironment.EndpointURL

  # ------------------------------
  # 后端部署资源：Elastic Beanstalk 应用与环境
  # ------------------------------

  # Create Elastic Beanstalk Application for backend
  BackendApplication:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      ApplicationName: skip-clone-backend
      Description: "Elastic Beanstalk application for skip-clone backend."

  # Create Elastic Beanstalk Environment for backend
  BackendEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      ApplicationName: !Ref BackendApplication
      EnvironmentName: prod
      SolutionStackName: "64bit Amazon Linux 2023 v6.5.0 running Node.js 20"
      OptionSettings:
        # Set the service role for Elastic Beanstalk
        - Namespace: "aws:elasticbeanstalk:environment"
          OptionName: ServiceRole
          Value: "aws-elasticbeanstalk-service-role-skip-clone"
        # Specify environment type as LoadBalanced
        - Namespace: "aws:elasticbeanstalk:environment"
          OptionName: EnvironmentType
          Value: "LoadBalanced"
        # Configure Auto Scaling group size
        - Namespace: "aws:autoscaling:asg"
          OptionName: MinSize
          Value: "3"
        - Namespace: "aws:autoscaling:asg"
          OptionName: MaxSize
          Value: "6"
        # Set the EC2 instance profile for the launch configuration
        - Namespace: "aws:autoscaling:launchconfiguration"
          OptionName: IamInstanceProfile
          Value: "elasticbeanstalk-instance-profile-skip-clone"
        # Configure VPC settings using resources created above
        - Namespace: "aws:ec2:vpc"
          OptionName: VPCId
          Value: !Ref SkipCloneVPC
        - Namespace: "aws:ec2:vpc"
          OptionName: Subnets
          Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2, !Ref PrivateSubnet3 ] ]
        - Namespace: "aws:ec2:vpc"
          OptionName: ELBSubnets
          Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3 ] ]
        # Configure ALB listener settings for HTTPS on port 443
        - Namespace: "aws:elbv2:listener:443"
          OptionName: ListenerEnabled
          Value: "true"
        - Namespace: "aws:elbv2:listener:443"
          OptionName: Protocol
          Value: "HTTPS"
        - Namespace: "aws:elbv2:listener:443"
          OptionName: Port
          Value: "443"
        # 配置 ALB 使用新建的 ACM 证书 ARN
        - Namespace: "aws:elbv2:listener:443"
          OptionName: SSLCertificateArns
          Value: !Ref SkipCloneCertificate
        # Specify allowed instance types for the environment
        - Namespace: "aws:ec2:instances"
          OptionName: AllowedInstanceTypes
          Value: "t2.micro,t3.micro"

Outputs:
  VPCId:
    Description: "Skip-clone VPC ID"
    Value: !Ref SkipCloneVPC
  PublicSubnetIds:
    Description: "Public Subnet IDs"
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3 ] ]
  PrivateSubnetIds:
    Description: "Private Subnet IDs"
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2, !Ref PrivateSubnet3 ] ]
  FrontendBucketName:
    Description: "Frontend S3 Bucket Name"
    Value: !Ref FrontendBucket
  CloudFrontDistributionDomainName:
    Description: "CloudFront Distribution Domain Name"
    Value: !GetAtt CloudFrontDistribution.DomainName
  BackendApplicationName:
    Description: "Elastic Beanstalk Application Name for Backend"
    Value: !Ref BackendApplication
  BackendEnvironmentName:
    Description: "Elastic Beanstalk Environment Name for Backend"
    Value: !Ref BackendEnvironment
  CustomDomain:
    Description: "Custom domain for skip-clone application"
    Value: !Join [ "", [ "skip-clone.leopoldhsingresumeproject", !Ref RandomSuffix, ".cc" ] ]
