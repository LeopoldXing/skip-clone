AWSTemplateFormatVersion: '2010-09-09'
Description: >
  CloudFormation template for establishing the cloud resources of skip-clone application.
  It creates a VPC with three public and three private subnets across three AZs for high availability,
  a S3 bucket with CloudFront distribution (via OAC) for frontend hosting,
  an Elastic Beanstalk application and environment for deploying backend application,
  and deploys an Amazon DocumentDB cluster (3 instances for high availability) as database.

Parameters:
  S3BucketName:
    Description: "The name for S3 bucket, it must be globally unique. (e.g., skip-clone-frontend-hosting-123)"
    Type: String
  DBUsername:
    Description: "The username for the DocumentDB cluster master user."
    Type: String
  DBPassword:
    Description: "The password for the DocumentDB cluster master user."
    Type: String
    NoEcho: true
  DomainName:
    Description: "Domain name (e.g., skip-clone.example.com) that will later point to ALB"
    Type: String
  CertificateARN:
    Description: "ARN for the corresponding SSL/TLS certificate, managed by ACM or IAM"
    Type: String

Resources:
  # ------------------------------
  # Network resources
  # ------------------------------
  SkipCloneVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: skip-clone-vpc

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SkipCloneVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: skip-clone-public-subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SkipCloneVPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: skip-clone-public-subnet-2

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SkipCloneVPC
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 2, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: skip-clone-public-subnet-3

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SkipCloneVPC
      CidrBlock: 10.0.11.0/24
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: skip-clone-private-subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SkipCloneVPC
      CidrBlock: 10.0.12.0/24
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: skip-clone-private-subnet-2

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SkipCloneVPC
      CidrBlock: 10.0.13.0/24
      AvailabilityZone: !Select [ 2, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: skip-clone-private-subnet-3

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: skip-clone-igw

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref SkipCloneVPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SkipCloneVPC
      Tags:
        - Key: Name
          Value: skip-clone-public-rt

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  # NAT Gateway
  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: skip-clone-natgw

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SkipCloneVPC
      Tags:
        - Key: Name
          Value: skip-clone-private-rt

  PrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: NatGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable

  # ------------------------------
  # Frontend resources
  # ------------------------------
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
      WebsiteConfiguration:
        IndexDocument: index.html
    DeletionPolicy: Retain

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Version: "2008-10-17"
        Id: PolicyForCloudFrontPrivateContent
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub "arn:aws:s3:::${FrontendBucket}/*"
            Condition:
              StringEquals:
                "AWS:SourceArn": !Sub
                  - "arn:aws:cloudfront::${AWS::AccountId}:distribution/${DistributionId}"
                  - { DistributionId: !GetAtt CloudFrontDistribution.Id }

  CloudFrontOAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: OAC-SkipClone-Frontend
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
        Description: "Origin Access Control for skip-clone frontend S3 bucket"

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt FrontendBucket.RegionalDomainName
            OriginAccessControlId: !Ref CloudFrontOAC
            S3OriginConfig: { }
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          MinTTL: 0
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        PriceClass: PriceClass_100

  # ------------------------------
  # IAM resources:
  # Elastic Beanstalk Instance Role & Instance Profile & Elastic Beanstalk Service Role
  # ------------------------------
  ElasticBeanstalkInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSElasticBeanstalkMulticontainerDocker
        - arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier
      Path: "/"

  ElasticBeanstalkInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref ElasticBeanstalkInstanceRole
      Path: "/"

  ElasticBeanstalkServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - elasticbeanstalk.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkEnhancedHealth
        - arn:aws:iam::aws:policy/AWSElasticBeanstalkManagedUpdatesCustomerRolePolicy
      Path: "/"

  # ------------------------------
  # Backend resources:
  # 1. Elastic beanstalk app
  # 2. Elastic beanstalk env
  # ------------------------------
  BackendApplication:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      ApplicationName: skip-clone-backend
      Description: "Elastic Beanstalk application for skip-clone backend."

  BackendEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      ApplicationName: !Ref BackendApplication
      EnvironmentName: skip-clone-backend-prod
      SolutionStackName: "64bit Amazon Linux 2023 v6.5.0 running Node.js 20"
      OptionSettings:
        # Elastic Beanstalk service role
        - Namespace: "aws:elasticbeanstalk:environment"
          OptionName: ServiceRole
          Value: !Ref ElasticBeanstalkServiceRole
        # LoadBalancing
        - Namespace: "aws:elasticbeanstalk:environment"
          OptionName: EnvironmentType
          Value: "LoadBalanced"
        - Namespace: "aws:elasticbeanstalk:environment"
          OptionName: LoadBalancerType
          Value: "application"
        # Auto Scaling Group settings
        - Namespace: "aws:autoscaling:asg"
          OptionName: MinSize
          Value: "3"
        - Namespace: "aws:autoscaling:asg"
          OptionName: MaxSize
          Value: "6"
        # Instance profile for EC2
        - Namespace: "aws:autoscaling:launchconfiguration"
          OptionName: IamInstanceProfile
          Value: !Ref ElasticBeanstalkInstanceProfile
        # Network for EC2
        - Namespace: "aws:ec2:vpc"
          OptionName: VPCId
          Value: !Ref SkipCloneVPC
        - Namespace: "aws:ec2:vpc"
          OptionName: Subnets
          Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2, !Ref PrivateSubnet3 ] ]
        - Namespace: "aws:ec2:vpc"
          OptionName: ELBSubnets
          Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3 ] ]
        # ALB Https listener
        - Namespace: "aws:elbv2:listener:443"
          OptionName: ListenerEnabled
          Value: "true"
        - Namespace: "aws:elbv2:listener:443"
          OptionName: Protocol
          Value: "HTTPS"
        # ALB SSL Certificate
        - Namespace: "aws:elbv2:listener:443"
          OptionName: SSLCertificateArns
          Value: !Ref CertificateARN
        - Namespace: "aws:ec2:instances"
          OptionName: InstanceTypes
          Value: "t3.micro,t3.small"
        - Namespace: "aws:ec2:instances"
          OptionName: SupportedArchitectures
          Value: "x86_64"

  # ------------------------------
  # Amazon DocumentDB
  # ------------------------------
  DocumentDBSubnetGroup:
    Type: AWS::DocDB::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet group for DocumentDB cluster"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3

  DocumentDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for DocumentDB cluster"
      VpcId: !Ref SkipCloneVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          CidrIp: 10.0.0.0/16

  DocumentDBCluster:
    Type: AWS::DocDB::DBCluster
    Properties:
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      VpcSecurityGroupIds:
        - !Ref DocumentDBSecurityGroup
      DBSubnetGroupName: !Ref DocumentDBSubnetGroup
      BackupRetentionPeriod: 5
      PreferredMaintenanceWindow: "sun:05:00-sun:06:00"

  DocumentDBInstance1:
    Type: AWS::DocDB::DBInstance
    Properties:
      DBClusterIdentifier: !Ref DocumentDBCluster
      DBInstanceClass: db.t3.medium
      AvailabilityZone: !Select [ 0, !GetAZs "" ]

  DocumentDBInstance2:
    Type: AWS::DocDB::DBInstance
    Properties:
      DBClusterIdentifier: !Ref DocumentDBCluster
      DBInstanceClass: db.t3.medium
      AvailabilityZone: !Select [ 1, !GetAZs "" ]

  DocumentDBInstance3:
    Type: AWS::DocDB::DBInstance
    Properties:
      DBClusterIdentifier: !Ref DocumentDBCluster
      DBInstanceClass: db.t3.medium
      AvailabilityZone: !Select [ 2, !GetAZs "" ]

Outputs:
  VPCId:
    Description: "Skip-clone VPC ID"
    Value: !Ref SkipCloneVPC
  PublicSubnetIds:
    Description: "Public Subnet IDs"
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3 ] ]
  PrivateSubnetIds:
    Description: "Private Subnet IDs"
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2, !Ref PrivateSubnet3 ] ]
  CloudFrontDistributionDomainName:
    Description: "CloudFront Distribution Domain Name"
    Value: !GetAtt CloudFrontDistribution.DomainName
  BackendEnvEndpoint:
    Description: "Backend endpoint"
    Value: !GetAtt BackendEnvironment.EndpointURL
  DocumentDBClusterEndpoint:
    Description: "DocumentDB cluster endpoint"
    Value: !GetAtt DocumentDBCluster.Endpoint
